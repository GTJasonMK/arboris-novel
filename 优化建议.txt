  🔴 S级问题 - 数据丢失风险（必须立即修复）

  1. 重新生成蓝图会无警告删除所有章节大纲

  位置：backend/app/api/routers/novels.py:269-275

  问题描述：
  # 强制清空旧大纲，避免蓝图与章节大纲不一致
  if blueprint_obj.chapter_outline:
      logger.info("检测到旧章节大纲，现在清空: project=%s", project_id)
      await session.execute(
          delete(ChapterOutline).where(ChapterOutline.project_id == project_id)
      )

  用户影响：
  - 用户修改蓝图设定后点击"重新生成"，所有已生成的章节大纲（可能耗时数十分钟）会被全部删除
  - 对于长篇小说，用户可能已经生成了10个部分大纲 + 数百个章节大纲
  - 没有任何警告提示，用户不知道会发生数据丢失
  - 操作不可逆，无法恢复

  建议解决方案：
  # 方案1：前端添加确认对话框
  "重新生成蓝图将删除所有已生成的章节大纲（共XX章），是否继续？"

  # 方案2：提供保留选项
  "检测到已有章节大纲，请选择：
   [ ] 删除并重新生成
   [ ] 保留现有大纲，仅更新蓝图元信息"

  # 方案3：软删除
  将旧大纲标记为archived，允许用户恢复

  ---
  2. 删除操作无撤销机制

  位置：backend/app/api/routers/writer.py:708-749（删除章节），backend/app/services/novel_service.py:204-208（删除项
  目）

  用户影响：
  - 用户误点"删除章节"后，包括所有版本、评审、向量数据全部永久删除
  - 删除项目会删除所有关联数据，无法恢复
  - 常见场景：用户想删除章节3，结果误选了章节30

  建议解决方案：
  # 添加deleted_at字段，实现软删除
  chapter.deleted_at = datetime.now()

  # 提供回收站功能
  GET /api/novels/{id}/trash  # 查看已删除内容
  POST /api/novels/{id}/restore  # 恢复删除

  ---
  3. 长时间操作中断导致工作白费

  位置：backend/app/services/part_outline_service.py:282-419（批量生成章节大纲）

  问题描述：
  - 批量生成10个部分的章节大纲，需要20分钟
  - 如果在第8个部分时网络中断或用户刷新页面
  - 前面已完成的7个部分状态可能不一致（有的completed，有的还是generating）
  - 用户刷新后不知道哪些完成了，哪些需要重新生成

  用户影响：
  - 长时间等待后，一个小问题就要重新开始
  - 前端状态（isGenerating）存储在组件中，刷新后丢失
  - 用户不知道当前进度，可能重复生成

  建议解决方案：
  # 后端：使用后台任务队列（Celery）
  @celery_app.task
  def generate_part_chapters_task(project_id, part_number, user_id):
      # 可中断、可恢复的任务

  # 前端：轮询任务状态
  GET /api/writer/novels/{id}/parts/progress
  # 返回每个部分的真实状态

  ---
  🟠 A级问题 - 严重影响使用效率

  4. 长篇小说章节大纲生成过慢

  位置：backend/app/services/part_outline_service.py:454-529

  问题描述：
  # 虽然接受max_concurrent参数，但实际是串行执行
  for part in parts:
      chapters = await self.generate_part_chapters(...)  # 串行

  用户影响：
  - 10个部分 × 2分钟/部分 = 20分钟等待
  - 注释说"为避免session并发问题"，但这是架构问题不应让用户承担
  - 用户必须保持浏览器打开，否则进度丢失

  建议解决方案：
  # 使用独立的session，真正实现并发
  async def generate_with_own_session(part_number):
      async with async_session_maker() as session:
          service = PartOutlineService(session)
          await service.generate_part_chapters(...)

  # 并发执行
  tasks = [generate_with_own_session(pn) for pn in part_numbers]
  await asyncio.gather(*tasks)

  ---
  5. 章节生成失败无法重试单个版本

  位置：backend/app/api/routers/writer.py:66-441

  问题描述：
  - 默认生成2个版本，如果第2个版本失败
  - 返回{"content": "生成失败: {exc}"}作为版本内容
  - 用户只能重新生成整章（删除所有版本），不能只重新生成失败的版本

  用户影响：
  - 第1个版本可能已经很好，但因为第2个版本失败需要全部重新生成
  - 重新生成时可能两个版本都不如原来的第1个版本
  - 浪费时间和API调用次数

  建议解决方案：
  # 添加单版本重试接口
  @router.post("/novels/{project_id}/chapters/{chapter_number}/versions/{version_index}/retry")
  async def retry_chapter_version(...):
      # 只重新生成指定版本

  # 前端UI显示
  [版本1] ✅ 内容正常
  [版本2] ❌ 生成失败 [重试] 按钮

  ---
  6. 错误信息不友好，用户无法自助解决

  位置：多处HTTPException

  问题示例：
  raise HTTPException(status_code=500, detail="LLM返回的章节大纲格式错误")
  # 用户看到这个错误，不知道该怎么办

  用户影响：
  - "蓝图中未找到对应章节纲要" - 用户不知道为什么会这样
  - "Session is already flushing" - 用户完全看不懂
  - 只能盲目重试，或者放弃使用

  建议解决方案：
  # 错误信息分层
  {
    "user_message": "章节大纲生成失败，这可能是因为AI响应格式异常，请重试。如果问题持续，请检查提示词设置。",
    "technical_detail": "LLM返回的JSON无法解析: JSONDecodeError at line 42",
    "suggested_actions": [
      "点击下方'重试'按钮",
      "或前往'管理后台-提示词管理'检查screenwriting提示词"
    ]
  }

  ---
  7. 灵感模式对话状态持久化不完整

  位置：frontend/src/views/InspirationMode.vue:149-191

  问题描述：
  // 只存储了project_id
  localStorage.setItem(STORAGE_KEY, project_id)

  // 但这些关键状态都在组件内存中
  conversationStarted.value = true
  currentTurn.value = 5
  chatMessages.value = [...]  // 刷新后丢失

  用户影响：
  - 用户对话到第8轮时刷新页面，回到初始状态
  - 需要重新开始对话（概念对话不能中断恢复）
  - 已经和AI讨论的世界观设定都需要重新输入

  建议解决方案：
  // 完整持久化对话状态
  const savedState = {
    project_id,
    conversation_started: true,
    current_turn: 5,
    chat_messages: [...],
    current_ui_control: {...}
  }
  localStorage.setItem(STORAGE_KEY, JSON.stringify(savedState))

  // 页面加载时恢复
  onMounted(() => {
    const saved = JSON.parse(localStorage.getItem(STORAGE_KEY))
    if (saved) {
      conversationStarted.value = saved.conversation_started
      // ...恢复所有状态
    }
  })

  ---
  🟡 B级问题 - 影响体验但可容忍

  8. 摘要生成失败导致版本选择操作失败

  位置：backend/app/api/routers/writer.py:489-497

  问题描述：
  # 选择版本时强制生成摘要
  summary = await llm_service.get_summary(...)  # 如果这里失败
  chapter.real_summary = remove_think_tags(summary)
  await session.commit()  # 整个操作失败

  用户影响：
  - 用户选择了喜欢的版本，点击"确认"
  - 因为摘要生成超时（网络问题），整个操作回滚
  - 用户需要重新选择版本

  建议解决方案：
  # 分离版本选择和摘要生成
  chapter.selected_version_id = selected.id
  await session.commit()  # 先保存选择

  # 异步生成摘要
  try:
      summary = await llm_service.get_summary(...)
      chapter.real_summary = summary
      await session.commit()
  except Exception:
      logger.error("摘要生成失败，将在后台重试")
      # 添加到重试队列

  ---
  9. 向量库同步失败用户无感知

  位置：backend/app/api/routers/writer.py:500-526（选择版本时），792-804（编辑章节时）

  问题描述：
  if vector_store:
      try:
          await ingestion_service.ingest_chapter(...)
      except Exception:
          logger.warning("向量库同步失败")  # 只记录日志

  用户影响：
  - 向量库同步失败后，后续生成章节时检索不到这章的内容
  - RAG质量下降，生成的章节可能出现剧情不连贯
  - 用户完全不知道向量库同步失败了

  建议解决方案：
  # 前端显示同步状态
  {
    "chapter_number": 5,
    "vector_sync_status": "failed",
    "vector_sync_error": "向量库连接超时"
  }

  # UI提示
  [第5章] ⚠️ RAG同步失败 [重新同步] 按钮

  ---
  10. 项目状态管理混乱

  位置：多个service之间

  问题描述：
  - 状态定义在ProjectStatus枚举中：concept_complete, blueprint_ready, part_outlines_ready, chapter_outlines_ready,
  writing, completed
  - 但状态转换逻辑分散在多处：
    - novels.py:133-135：概念完成→蓝图就绪
    - part_outline_service.py:270-272：部分大纲完成
    - writer.py:86-89：开始写作
    - novel_service.py:767-770：全部完成

  用户影响：
  - 用户重新生成蓝图后，状态不会回退
  - 可能出现状态为"writing"但章节大纲为空的情况
  - 前端根据状态显示UI，状态错误导致UI混乱

  建议解决方案：
  # 统一状态机管理
  class ProjectStateMachine:
      TRANSITIONS = {
          'concept_complete': ['blueprint_ready'],
          'blueprint_ready': ['part_outlines_ready', 'chapter_outlines_ready'],
          'part_outlines_ready': ['chapter_outlines_ready'],
          'chapter_outlines_ready': ['writing'],
          'writing': ['completed'],
      }

      async def transition_to(self, new_status):
          if new_status not in self.TRANSITIONS[self.current_status]:
              raise InvalidStateTransition()
          # 执行状态转换

  ---
  11. 轮询机制不可靠

  位置：frontend/src/components/novel-detail/PartOutlineGenerator.vue:171-196

  问题描述：
  pollingTimer = setInterval(async () => {
    await novelStore.loadProject(props.projectId, true)

    // 只检查数量，没有检查失败状态
    if (partOutlines.value.length > 0) {
      stopPolling()  // 但生成可能失败了
    }
  }, 5000)

  用户影响：
  - 如果所有部分生成都失败，partOutlines仍为空，轮询永不停止
  - 没有超时机制，可能一直轮询
  - 浪费资源，用户不知道已经失败

  建议解决方案：
  const MAX_POLL_COUNT = 120 // 10分钟
  let pollCount = 0

  pollingTimer = setInterval(async () => {
    pollCount++
    if (pollCount > MAX_POLL_COUNT) {
      stopPolling()
      error.value = "生成超时，请刷新页面查看状态"
      return
    }

    const progress = await api.getPartOutlineProgress(projectId)
    if (progress.status === 'completed' || progress.status === 'failed') {
      stopPolling()
    }
  }, 5000)

  ---
  🟢 C级问题 - 优化类（长期改进）

  12. 性能问题：不必要的数据加载

  位置：backend/app/services/novel_service.py:498-528

  问题描述：
  async def _serialize_project(self, project: NovelProject):
      # 每次都序列化所有数据
      chapters_schema = [
          self._build_chapter_schema(project, number)  # 包含所有版本内容
          for number in chapter_numbers
      ]

  影响：
  - 对于100章的小说，每次加载都传输大量数据
  - 移动网络下加载很慢
  - 大部分数据前端可能不需要

  建议：
  # 提供按需加载接口
  GET /api/novels/{id}/sections/chapters?include_content=false
  # 章节列表不包含内容，只有元数据

  GET /api/novels/{id}/chapters/{number}
  # 单章详情才包含完整内容和版本

  ---
  13. 工作流灵活性不足

  问题：
  - 必须完成概念对话才能生成蓝图
  - 必须有蓝图才能生成章节
  - 用户可能只想快速生成几章试试效果

  建议：
  # 提供"快速开始"模式
  POST /api/novels/quick-start
  {
    "title": "测试小说",
    "brief_setting": "科幻背景",
    "chapter_count": 3
  }
  # 自动生成简单蓝图和大纲，直接进入写作